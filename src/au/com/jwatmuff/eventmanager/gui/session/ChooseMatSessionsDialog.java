/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChooseMatSessionsDialog.java
 *
 * Created on 30/04/2009, 8:48:03 PM
 */
package au.com.jwatmuff.eventmanager.gui.session;

import au.com.jwatmuff.eventmanager.db.SessionDAO;
import au.com.jwatmuff.eventmanager.gui.main.Icons;
import au.com.jwatmuff.eventmanager.model.misc.SessionLinker;
import au.com.jwatmuff.eventmanager.model.vo.Session;
import au.com.jwatmuff.genericdb.Database;
import com.jidesoft.swing.DefaultSelectable;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;

/**
 *
 * @author James
 */
public class ChooseMatSessionsDialog extends javax.swing.JDialog {
    private Database database;
    private boolean success;
    private DefaultListModel sessionListModel;
    private Session lastSelectedMat;

    /** Creates new form ChooseMatSessionsDialog */
    public ChooseMatSessionsDialog(java.awt.Frame parent, boolean modal, Database database, String message, String title) {
        super(parent, modal);
        initComponents();
        this.database = database;

        sessionListModel = new DefaultListModel();
        sessionList.setModel(sessionListModel);

        Collection<Session> mats = database.findAll(Session.class, SessionDAO.ALL_MATS);

        DefaultComboBoxModel matsModel = new DefaultComboBoxModel();
        matComboBox.setModel(matsModel);
        for (Session mat : mats) {
            matsModel.addElement(mat);
        }
        matComboBox.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList arg0, Object arg1, int arg2, boolean arg3, boolean arg4) {
                if (arg1 != null) {
                    arg1 = ((Session) arg1).getMat();
                }
                Component c = super.getListCellRendererComponent(arg0, arg1, arg2, arg3, arg4);
                if (c instanceof JLabel) {
                    ((JLabel) c).setIcon(Icons.CONTEST_AREA);
                }
                return c;
            }
        });

        sessionList.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList arg0, Object arg1, int arg2, boolean arg3, boolean arg4) {
                if (arg1 != null) {
                    DefaultSelectable s = (DefaultSelectable)arg1;
                    arg1 = ((Session)s.getObject()).getName();
                }
                Component c = super.getListCellRendererComponent(arg0, arg1, arg2, arg3, arg4);
                if (c instanceof JLabel) {
                    ((JLabel) c).setIcon(Icons.SESSION);
                }
                return c;
            }
        });

        messageLabel.setText(message);
        setTitle(title);

        setLocationRelativeTo(parent);
        getRootPane().setDefaultButton(okButton);

        updateSessionList();
    }

    public Session getSelectedMat() {
        return (Session) matComboBox.getSelectedItem();
    }

    private void updateSessionList() {
        Session mat = getSelectedMat();

        if(mat != lastSelectedMat)
            lastSelectedMat = mat;
        else
            return;

        sessionListModel.clear();

        if(mat == null) return;
        else {
            List<Session> sessions = SessionLinker.getMatSessions(database, mat);
            for(Session session : sessions)
                sessionListModel.addElement(new DefaultSelectable(session));
        }
    }

    public boolean getSuccess() {
        return success;
    }

    public List<Session> getSelectedSessions() {
        List<Session> sessions = new ArrayList<Session>();

        for(Object o : sessionList.getSelectedObjects()) {
            try {
                sessions.add((Session)o);
            } catch(ClassCastException e) {}
        }

        return sessions;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sessionList = new com.jidesoft.swing.CheckBoxListWithSelectable();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        selectAllCheckBox = new javax.swing.JCheckBox();
        matComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        messageLabel.setText("Message");

        jScrollPane1.setViewportView(sessionList);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        selectAllCheckBox.setText("Select All");
        selectAllCheckBox.setMargin(new java.awt.Insets(2, 4, 2, 2));
        selectAllCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllCheckBoxActionPerformed(evt);
            }
        });

        matComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                    .addComponent(selectAllCheckBox, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(messageLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 176, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancelButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(okButton))
                    .addComponent(matComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 283, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectAllCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        success = true;
        this.dispose();
}//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        success = false;
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void selectAllCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllCheckBoxActionPerformed
        if (selectAllCheckBox.isSelected())
            sessionList.selectAll();
        else
            sessionList.selectNone();
}//GEN-LAST:event_selectAllCheckBoxActionPerformed

    private void matComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matComboBoxActionPerformed
        updateSessionList();
}//GEN-LAST:event_matComboBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox matComboBox;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox selectAllCheckBox;
    private com.jidesoft.swing.CheckBoxListWithSelectable sessionList;
    // End of variables declaration//GEN-END:variables
}
