/*
 * ScoringPanel.java
 *
 * Created on 28 August 2008, 14:54
 */

package au.com.jwatmuff.eventmanager.gui.scoring;

import au.com.jwatmuff.eventmanager.db.FightDAO;
import au.com.jwatmuff.eventmanager.db.SessionDAO;
import au.com.jwatmuff.eventmanager.model.info.SessionInfo;
import au.com.jwatmuff.eventmanager.model.misc.ResultRecorder;
import au.com.jwatmuff.eventmanager.model.vo.Fight;
import au.com.jwatmuff.eventmanager.model.vo.Result;
import au.com.jwatmuff.eventmanager.model.vo.Session;
import au.com.jwatmuff.eventmanager.model.vo.SessionFight;
import au.com.jwatmuff.genericdb.Database;
import au.com.jwatmuff.genericdb.distributed.DataEvent;
import au.com.jwatmuff.genericdb.transaction.TransactionListener;
import au.com.jwatmuff.genericdb.transaction.TransactionNotifier;
import java.awt.Component;
import java.awt.Frame;
import java.util.Collection;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import org.springframework.beans.factory.annotation.Required;

/**
 *
 * @author  James
 */
public class ScoringPanel extends javax.swing.JPanel implements TransactionListener {
    private Database database;
    private TransactionNotifier notifier;
    private Frame parentWindow;

    private DefaultComboBoxModel matComboBoxModel = new DefaultComboBoxModel();
    
    private Fight currentFight;
    
    /** Creates new form FightProgressionPanel */
    public ScoringPanel() {
        initComponents();
        matComboBox.setModel(matComboBoxModel);
        matComboBox.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList jList, Object object, int i, boolean b, boolean b0) {
                if(object instanceof Session) {
                    Session s = (Session)object;
                    object = s.getMat();
                }
                return super.getListCellRendererComponent(jList, object, i, b, b0);
            }
        });
    }
    
    @Required
    public void setDatabase(Database database) {
        this.database = database;
    }
    
    @Required
    public void setNotifier(TransactionNotifier notifier) {
        this.notifier = notifier;
    }
    
    public void setParentWindow(Frame parentWindow) {
        this.parentWindow = parentWindow;
    }
    
    public void afterPropertiesSet() {
        notifier.addListener(this, Result.class, Fight.class, SessionFight.class, Session.class);
        updateMatsFromDatabase();
        updateFightFromDatabase();
    }
    
    private void updateMatsFromDatabase() {
        //Session selected = getSelectedMat();
        matComboBoxModel.removeAllElements();
        for(Session session : database.findAll(Session.class, SessionDAO.WITH_LOCKED_STATUS, Session.LockedStatus.FIGHTS_LOCKED)) {
            if(session.getType() == Session.SessionType.MAT)
                matComboBoxModel.addElement(session);
            /*
            if(selected != null && session.getID() == selected.getID())
                matComboBox.setSelectedItem(session);
             **/
        }
    }
    
    private Session getSelectedMat() {
        return (Session)matComboBox.getSelectedItem();
    }
    
    
    private void updateFightFromDatabase() {
        Session mat = getSelectedMat();
        
        fightLabel.setText("---");
        winButton1.setEnabled(false);
        winButton2.setEnabled(false);

        if(mat == null) return;
        SessionInfo si = new SessionInfo(database, mat);

        while(si.getFollowingMatSessions().size() > 0) {
            Session following = si.getFollowingMatSessions().iterator().next();
            Collection<Fight> fights = database.findAll(Fight.class, FightDAO.UNPLAYED_IN_SESSION, following.getID());
            if(fights.size() == 0)
                si = new SessionInfo(database, following);
            else {
                currentFight = fights.iterator().next();
                fightLabel.setText(currentFight.getPlayerCodes()[0] +
                                   " vs " +
                                   currentFight.getPlayerCodes()[1]);
                winButton1.setEnabled(true);
                winButton2.setEnabled(true);
                return;
            }
        }
        fightLabel.setText("No More Fights");
        winButton1.setEnabled(false);
        winButton2.setEnabled(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        matComboBox = new javax.swing.JComboBox();
        fightLabel = new javax.swing.JLabel();
        winButton1 = new javax.swing.JButton();
        winButton2 = new javax.swing.JButton();

        matComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matComboBoxActionPerformed(evt);
            }
        });

        fightLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        fightLabel.setText("Fight 1");

        winButton1.setText("Player 1 Wins");
        winButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                winButton1ActionPerformed(evt);
            }
        });

        winButton2.setText("Player 2 Wins");
        winButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                winButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fightLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(winButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(winButton2)))
                .addContainerGap(190, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fightLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(winButton1)
                    .addComponent(winButton2))
                .addContainerGap(205, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void winButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_winButton2ActionPerformed
        if(currentFight == null) return;
        Result result = new Result();
        result.setFightID(currentFight.getID());
        result.setPlayerScores(new int[] {0, 1});
        ResultRecorder.recordResult(database, result);
    }//GEN-LAST:event_winButton2ActionPerformed

    private void winButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_winButton1ActionPerformed
        if(currentFight == null) return;
        Result result = new Result();
        result.setFightID(currentFight.getID());
        result.setPlayerScores(new int[] {1, 0});
        ResultRecorder.recordResult(database, result);
    }//GEN-LAST:event_winButton1ActionPerformed

    private void matComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matComboBoxActionPerformed
        updateFightFromDatabase();
    }//GEN-LAST:event_matComboBoxActionPerformed
    
    @Override
    public void handleTransactionEvents(List<DataEvent> events, Collection<Class> dataClasses) {
        updateMatsFromDatabase();
        updateFightFromDatabase();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fightLabel;
    private javax.swing.JComboBox matComboBox;
    private javax.swing.JButton winButton1;
    private javax.swing.JButton winButton2;
    // End of variables declaration//GEN-END:variables

    
}
