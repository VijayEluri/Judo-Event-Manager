/*
 * SimpleScoringWindow.java
 *
 * Created on 6 November 2008, 14:45
 */

package au.com.jwatmuff.eventmanager.gui.scoring;

import au.com.jwatmuff.eventmanager.model.vo.Session;
import au.com.jwatmuff.eventmanager.util.GUIUtils;
import au.com.jwatmuff.eventmanager.util.gui.PanelDisplayFrame;
import au.com.jwatmuff.genericdb.Database;
import au.com.jwatmuff.genericdb.transaction.TransactionNotifier;
import java.awt.Frame;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridLayout;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

/**
 *
 * @author  James
 */
public class SimpleScoringWindow extends javax.swing.JFrame {
    private Session matSession;
    private Database database;
    private TransactionNotifier notifier;
    private SimpleScoringPanel scoringPanel, fullScreenScoringPanel;
    private ScoringColors colors = new ScoringColors();

    /** Creates new form SimpleScoringWindow */
    public SimpleScoringWindow(Database database, TransactionNotifier notifier, Session mat) {
        initComponents();
        setLocationRelativeTo(null);
        this.matSession = mat;
        this.database = database;
        this.notifier = notifier;

        scoringPanel = getScoringPanel();
        fullScreenScoringPanel = getScoringPanel();
        scoringPanel.setScoringColors(colors);
        fullScreenScoringPanel.setScoringColors(colors);

        getContentPane().setLayout(new GridLayout(1,1));
        getContentPane().add(scoringPanel);
        setTitle("Event Manager - Simple Score Entry - [" + mat.getMat() + "]");
    }
    
    private SimpleScoringPanel getScoringPanel() {
        SimpleScoringPanel sp = new SimpleScoringPanel(matSession);
        sp.setDatabase(database);
        sp.setNotifier(notifier);
        sp.setParentWindow(this);
        sp.afterPropertiesSet();
        return sp;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        closeMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        fullScreenMenuItem = new javax.swing.JMenuItem();
        swapPlayersMenuItem = new javax.swing.JCheckBoxMenuItem();
        chooseColorsMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jMenu1.setText("File");

        closeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        closeMenuItem.setText("Close");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(closeMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");

        fullScreenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.ALT_MASK));
        fullScreenMenuItem.setText("Fullscreen");
        fullScreenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullScreenMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(fullScreenMenuItem);
        jMenu2.remove(fullScreenMenuItem);

        swapPlayersMenuItem.setText("Swap Players");
        swapPlayersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swapPlayersMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(swapPlayersMenuItem);

        chooseColorsMenuItem.setText("Choose Colors..");
        chooseColorsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseColorsMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(chooseColorsMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void chooseColorsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseColorsMenuItemActionPerformed
    ScoringColorsDialog scd = new ScoringColorsDialog(this, true);
    scd.setColors(colors);
    scd.setVisible(true);
    colors = scd.getColors();
    scoringPanel.setScoringColors(colors);
    fullScreenScoringPanel.setScoringColors(colors);
}//GEN-LAST:event_chooseColorsMenuItemActionPerformed

private void fullScreenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullScreenMenuItemActionPerformed
    final GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
    
    if(gd.isFullScreenSupported()) {
        final SimpleScoringPanel sp = fullScreenScoringPanel;
        final Frame w = new PanelDisplayFrame(sp);
        w.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                if(evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    w.removeNotify();
                    w.setUndecorated(false);
                    w.addNotify();
                    gd.setFullScreenWindow(null);
                    w.dispose();
                }
            }
        });

        w.removeNotify();
        w.setUndecorated(true);
        w.addNotify();
        gd.setFullScreenWindow(w);
    }
    else
        GUIUtils.displayMessage(this, "Full Screen Not Supported", "Full Screen Not Supported");
}//GEN-LAST:event_fullScreenMenuItemActionPerformed

private void swapPlayersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swapPlayersMenuItemActionPerformed
    scoringPanel.swapPlayers();
    fullScreenScoringPanel.swapPlayers();
}//GEN-LAST:event_swapPlayersMenuItemActionPerformed

private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuItemActionPerformed
    scoringPanel.destroy();
    fullScreenScoringPanel.destroy();
    dispose();
}//GEN-LAST:event_closeMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem chooseColorsMenuItem;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JMenuItem fullScreenMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JCheckBoxMenuItem swapPlayersMenuItem;
    // End of variables declaration//GEN-END:variables

}
