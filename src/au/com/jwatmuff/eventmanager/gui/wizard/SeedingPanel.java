/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SeedingPanel.java
 *
 * Created on 14/09/2010, 8:25:15 PM
 */

package au.com.jwatmuff.eventmanager.gui.wizard;

import au.com.jwatmuff.eventmanager.model.info.PlayerPoolInfo;
import au.com.jwatmuff.eventmanager.model.misc.PoolPlayerSequencer;
import au.com.jwatmuff.eventmanager.model.vo.PlayerDetails;
import au.com.jwatmuff.eventmanager.model.vo.Pool;
import au.com.jwatmuff.genericdb.transaction.TransactionNotifier;
import au.com.jwatmuff.genericdb.transaction.TransactionalDatabase;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author James
 */
public class SeedingPanel extends javax.swing.JPanel implements DrawWizardWindow.Panel {
    private DefaultTableModel model;
    private TransactionalDatabase database;
    private TransactionNotifier notifier;
    private Pool pool;
    private List<PlayerPoolInfo> players = new ArrayList<PlayerPoolInfo>();

    /** Creates new form SeedingPanel */
    public SeedingPanel(TransactionalDatabase database, TransactionNotifier notifier, Pool pool) {
        this.database = database;
        this.notifier = notifier;
        this.pool = pool;

        initComponents();

        divisionNameLabel.setText(pool.getDescription());

        model = new DefaultTableModel();
        model.addColumn("Player");
        model.addColumn("Team");
        model.addColumn("Seed");

        model.setColumnIdentifiers(new Object[] { "Player", "Team", "Seed" });

        seedingTable.setModel(model);

        JComboBox seedingComboBox = new JComboBox(new Object[] {1, 2, 3, 4});

        seedingTable.getColumn("Seed").setCellEditor(new DefaultCellEditor(seedingComboBox));

        updateFromDatabase();
    }

    private void updateFromDatabase() {
        List<PlayerPoolInfo> newPlayers = PoolPlayerSequencer.getPlayerSequence(database, pool.getID());

        // step 1. delete old players and update existing players
        List<PlayerPoolInfo> deletedPlayers;
        int row = 0;
        Iterator<PlayerPoolInfo> iterator = players.iterator();
        while(iterator.hasNext()) {
            PlayerPoolInfo player = iterator.next();
            if(!newPlayers.contains(player)) {
                model.removeRow(row);
                iterator.remove();
            }
            else {
                Object[] rowData = getRowData(player);
                for(int col = 0; col < 3; col++)
                    model.setValueAt(rowData[col], row, col);
                row++;
                newPlayers.remove(player);
            }
        }
        
        // step 2. add any new players
        for(PlayerPoolInfo player : newPlayers) {
            players.add(player);
            model.addRow(getRowData(player));
        }

        
    }

    private Object[] getRowData(PlayerPoolInfo player) {
        PlayerDetails playerDetails = database.get(PlayerDetails.class, player.getPlayer().getDetailsID());
        return new Object[] {
            player.getPlayer().getLastName() + ", " + player.getPlayer().getFirstName(),
            playerDetails.getClub(),
            player.getPlayerPool().getPlayerPosition()
        };
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        seedingTable = new javax.swing.JTable();
        divisionNameLabel = new javax.swing.JLabel();

        seedingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        seedingTable.setGridColor(new java.awt.Color(237, 237, 237));
        seedingTable.setRowHeight(19);
        jScrollPane1.setViewportView(seedingTable);

        divisionNameLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
        divisionNameLabel.setText("Division Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                    .addComponent(divisionNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(divisionNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel divisionNameLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable seedingTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean nextButtonPressed() {
        return true;
    }

    @Override
    public boolean backButtonPressed() {
        return true;
    }

    @Override
    public boolean closedButtonPressed() {
        return true;
    }

}
