/*
 * EventManager
 * Copyright (c) 2008-2017 James Watmuff & Leonard Hall
 *
 * This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package au.com.jwatmuff.eventmanager.gui.scoreboard;

import javax.swing.SpinnerNumberModel;

/**
 *
 * @author  James
 */
public class SetTimeDialog extends javax.swing.JDialog {
    
    private boolean mainTimeSet, holddownTimeSet;
    private int mainTime, holddownTime;

    /** Creates new form SetTimeDialog */
    public SetTimeDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        
        mainTimerMinutesSpinner.setModel(new SpinnerNumberModel(0, 0,10, 1));
        mainTimerSecondsSpinner.setModel(new SpinnerNumberModel(0, 0,59, 1));
        holddownTimerSecondsSpinner.setModel(new SpinnerNumberModel(0, 0, 24, 1));
    }
    
    public boolean isMainTimeSet() {
        return mainTimeSet;
    }

    public boolean isHolddownTimeSet() {
        return holddownTimeSet;
    }

    public int getMainTime() {
        return mainTime;
    }

    public int getHolddownTime() {
        return holddownTime;
    }

    public void setGoldenScoreEnabled(boolean enabled) {
        goldenScoreCheckBox.setEnabled(enabled);
    }

    public void setGoldenScore(boolean goldenScore) {
        goldenScoreCheckBox.setSelected(goldenScore);
    }

    public boolean getGoldenScore() {
        return goldenScoreCheckBox.isSelected();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTimerCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        holddownTimerCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        mainTimerMinutesSpinner = new javax.swing.JSpinner();
        mainTimerSecondsSpinner = new javax.swing.JSpinner();
        holddownTimerSecondsSpinner = new javax.swing.JSpinner();
        goldenScoreCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Set Scoreboard Timers");
        setLocationByPlatform(true);

        mainTimerCheckBox.setSelected(true);
        mainTimerCheckBox.setText("Set Main Timer");
        mainTimerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainTimerCheckBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Min:");

        jLabel2.setText("Sec:");

        holddownTimerCheckBox.setText("Set Holddown Timer");
        holddownTimerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                holddownTimerCheckBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Sec:");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        holddownTimerSecondsSpinner.setEnabled(false);

        goldenScoreCheckBox.setText("Golden Score");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(96, Short.MAX_VALUE)
                .addComponent(okButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mainTimerMinutesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mainTimerSecondsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mainTimerCheckBox))
                .addContainerGap(84, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(holddownTimerSecondsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(holddownTimerCheckBox))
                .addContainerGap(115, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(goldenScoreCheckBox)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {holddownTimerSecondsSpinner, mainTimerMinutesSpinner, mainTimerSecondsSpinner});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTimerCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(mainTimerSecondsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainTimerMinutesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(holddownTimerCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(holddownTimerSecondsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(goldenScoreCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void mainTimerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainTimerCheckBoxActionPerformed
    boolean s = mainTimerCheckBox.isSelected();
    mainTimerMinutesSpinner.setEnabled(s);
    mainTimerSecondsSpinner.setEnabled(s);
}//GEN-LAST:event_mainTimerCheckBoxActionPerformed

private void holddownTimerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_holddownTimerCheckBoxActionPerformed
    boolean s = holddownTimerCheckBox.isSelected();
    holddownTimerSecondsSpinner.setEnabled(s);
}//GEN-LAST:event_holddownTimerCheckBoxActionPerformed

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    mainTimeSet = mainTimerCheckBox.isSelected();
    if(mainTimeSet)
        mainTime = (Integer)mainTimerMinutesSpinner.getValue() * 60 + (Integer)mainTimerSecondsSpinner.getValue();
    
    holddownTimeSet = holddownTimerCheckBox.isSelected();
    if(holddownTimeSet)
        holddownTime = (Integer)holddownTimerSecondsSpinner.getValue();
    dispose();
}//GEN-LAST:event_okButtonActionPerformed

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    mainTimeSet = holddownTimeSet = false;
    dispose();
}//GEN-LAST:event_cancelButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox goldenScoreCheckBox;
    private javax.swing.JCheckBox holddownTimerCheckBox;
    private javax.swing.JSpinner holddownTimerSecondsSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JCheckBox mainTimerCheckBox;
    private javax.swing.JSpinner mainTimerMinutesSpinner;
    private javax.swing.JSpinner mainTimerSecondsSpinner;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

}
