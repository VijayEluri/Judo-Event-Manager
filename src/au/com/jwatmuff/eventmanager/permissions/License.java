/*
 * EventManager
 * Copyright (c) 2008-2017 James Watmuff & Leonard Hall
 *
 * This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package au.com.jwatmuff.eventmanager.permissions;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import org.apache.log4j.Logger;

/**
 *
 * @author James
 */
public class License {
    private static final Logger log = Logger.getLogger(License.class);

    public static final String NAME_PROPERTY = "name";
    public static final String EXPIRY_PROPERTY = "expiry";
    public static final String TYPE_PROPERTY = "type";
    public static final String PHONE_PROPERTY = "contact";
    public static final String HASH_PROPERTY = "hash";
    
    private static final DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");

    private String name;
    private String contactPhone;
    private Date expiry;
    private LicenseType type;

    public License(String name, String contactPhone, Date expiry, LicenseType type) {
        this.name = name;
        this.contactPhone = contactPhone;
        this.expiry = expiry;
        this.type = type;
    }

    public String getName() {
        return name;
    }

    public String getContactPhoneNumber() {
        return contactPhone;
    }

    public Date getExpiry() {
        return new Date(expiry.getTime());
    }

    public LicenseType getType() {
        return type;
    }

    @Override
    public int hashCode() {
        String str =
                name.trim().toUpperCase() +
                dateFormat.format(expiry) +
                contactPhone.replaceAll("[^0-9]", "") +
                type;
        return Math.abs(str.hashCode());
    }

    /* Autogenerated equals method */
    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final License other = (License) obj;
        if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name)) {
            return false;
        }
        if ((this.contactPhone == null) ? (other.contactPhone != null) : !this.contactPhone.equals(other.contactPhone)) {
            return false;
        }
        if (this.expiry != other.expiry && (this.expiry == null || !this.expiry.equals(other.expiry))) {
            return false;
        }
        if (this.type != other.type) {
            return false;
        }
        return true;
    }

    public String getKey() {
        return dateFormat.format(expiry) + "-" +
                type.toString() + "-" +
                Integer.toString(hashCode(), 16).toUpperCase();
    }

    public static License loadFromFile(File file) {
        FileReader reader = null;
        try {
            Properties props = new Properties();
            reader = new FileReader(file);
            props.load(reader);

            String name = props.getProperty(NAME_PROPERTY);
            String contactPhone = props.getProperty(PHONE_PROPERTY);
            Date expiry = dateFormat.parse(props.getProperty(EXPIRY_PROPERTY));
            LicenseType type = LicenseType.valueOf(props.getProperty(TYPE_PROPERTY));
            int hash = Integer.valueOf(props.getProperty(HASH_PROPERTY), 16);
            if(name == null || expiry == null || type == null || hash == 0)
                throw new RuntimeException("Missing or invalid properties");
              
            License license =  new License(name, contactPhone, expiry, type);

            // We allow loading of out of date license, but it will just get ignored
            //long daysToExpiry = (license.getExpiry().getTime() - new Date().getTime());
            //if(daysToExpiry < 0)
            //    throw new RuntimeException("License has expired");

            if(license.hashCode() != hash)
                throw new RuntimeException("License key invalid");

            return license;

        } catch(Exception e) {
            throw new RuntimeException("Unable to load license from file", e);
        } finally {
            try {
                if(reader != null) reader.close();
            } catch(IOException e) {}
        }
    }

    public static void saveToFile(License license, File file) throws IOException {
        Properties props = new Properties();

        props.put(NAME_PROPERTY, license.getName());
        props.put(PHONE_PROPERTY, license.getContactPhoneNumber());
        props.put(EXPIRY_PROPERTY, dateFormat.format(license.getExpiry()));
        props.put(TYPE_PROPERTY, license.getType().toString());
        props.put(HASH_PROPERTY, Integer.toString(license.hashCode(), 16));

        FileWriter fileWriter = new FileWriter(file);
        try {
            props.store(fileWriter,
                    "EventManager License File\n" +
                    "WARNING! Editing this file will cause the license to stop working");
        } finally {
            fileWriter.close();
        }
    }

    public static License fromKey(String name, String contactPhone, String key) {
        try {
            String[] keyParts = key.split("-");
            Date expiry = dateFormat.parse(keyParts[0]);
            LicenseType type = LicenseType.valueOf(keyParts[1]);
            int hash = Integer.valueOf(keyParts[2], 16);

            License license = new License(name, contactPhone, expiry, type);

            if(license.hashCode() == hash)
                return license;
            else
                return null;
        } catch(Exception e) {
            return null;
        }
    }

    public static boolean isKeyValid(String name, String contactPhone, String key) {
        return (fromKey(name, contactPhone, key) != null);
    }
}
