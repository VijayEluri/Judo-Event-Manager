/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CheckboxListDialog.java
 *
 * Created on 30/04/2009, 8:48:03 PM
 */

package au.com.jwatmuff.eventmanager.util.gui;

import com.jidesoft.swing.DefaultSelectable;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author James
 */
public class CheckboxListDialog<T> extends javax.swing.JDialog {
    private List<T> selectedItems;
    private boolean success;

    public CheckboxListDialog(java.awt.Frame parent, boolean modal, List<T> items,
                              String message, String title) {
        this(parent, modal, items, message, title, false);
    }

    /** Creates new form CheckboxListDialog */
    public CheckboxListDialog(java.awt.Frame parent, boolean modal, List<T> items,
                              String message, String title, boolean allowEmpty) {
        super(parent, modal);
        initComponents();

        DefaultListModel model = new DefaultListModel();
        for(T item : items)
            if(item != null) model.addElement(new DefaultSelectable(item));
        checkBoxList.setModel(model);
        if(!allowEmpty) {
            checkBoxList.addItemListener(new ItemListener() {
                public void itemStateChanged(ItemEvent e) {
                    okButton.setEnabled(checkBoxList.getSelectedObjects().length > 0);
                }
            });
            okButton.setEnabled(false);
        }

        if(items.size() > 0) checkBoxList.setSelectedIndex(0);

        messageLabel.setText(message);
        setTitle(title);

        setLocationRelativeTo(parent);
        getRootPane().setDefaultButton(okButton);
    }

    public void setRenderer(StringRenderer<T> renderer) {
        setRenderer(renderer, null);
    }

    @SuppressWarnings("unchecked")
    public void setRenderer(StringRenderer<T> renderer, final Icon icon) {
        final StringRenderer<T> r = renderer;
        setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList arg0, Object arg1, int arg2, boolean arg3, boolean arg4) {
                try {
                    if(arg1 != null) arg1 = ((DefaultSelectable)arg1).getObject();
                    if(arg1 != null) arg1 = r.asString((T)arg1);
                } catch(ClassCastException e) {}
                Component c = super.getListCellRendererComponent(arg0, arg1, arg2, arg3, arg4);
                if(icon != null && c instanceof JLabel) {
                    ((JLabel)c).setIcon(icon);
                }
                return c;
            }
        });
    }

    public void setRenderer(ListCellRenderer renderer) {
        checkBoxList.setCellRenderer(renderer);
    }

    public boolean getSuccess() {
        return success;
    }

    public List<T> getSelectedItems() {
        return selectedItems;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        checkBoxList = new com.jidesoft.swing.CheckBoxListWithSelectable();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        selectAllCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        messageLabel.setText("Message");

        jScrollPane1.setViewportView(checkBoxList);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        selectAllCheckBox.setText("Select All");
        selectAllCheckBox.setMargin(new java.awt.Insets(2, 4, 2, 2));
        selectAllCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectAllCheckBox)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(messageLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cancelButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(okButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(messageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectAllCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unchecked")
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        selectedItems = new ArrayList<T>();
        for(Object o : checkBoxList.getSelectedObjects()) {
            try {
                selectedItems.add((T)o);
            } catch(ClassCastException e) {}
        }
        success = true;
        this.dispose();
}//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    success = false;
    selectedItems = Collections.emptyList();
    this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void selectAllCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllCheckBoxActionPerformed
        if(selectAllCheckBox.isSelected())
            checkBoxList.selectAll();
        else
            checkBoxList.selectNone();
}//GEN-LAST:event_selectAllCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private com.jidesoft.swing.CheckBoxListWithSelectable checkBoxList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox selectAllCheckBox;
    // End of variables declaration//GEN-END:variables

}
